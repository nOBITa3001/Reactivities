{
  "Query Handler": {
    "prefix": "qhandler",
    "body": [
      "using System.Collections.Generic;",
      "using System.Threading;",
      "using System.Threading.Tasks;",
      "using Domain;",
      "using MediatR;",
      "using Microsoft.EntityFrameworkCore;",
      "using Persistence;",
      "",
      "namespace Application.${1:Domains}",
      "{",
      "  public class ${2:Action}",
      "  {",
      "    public class Query : IRequest<${3:TResponse}> { }",
      "",
      "    public class Handler : IRequestHandler<Query, ${3:TResponse}>",
      "    {",
      "      private readonly DataContext _context;",
      "",
      "      public Handler(DataContext context)",
      "      {",
      "        _context = context;",
      "      }",
      "",
      "      public async Task<${3:TResponse}> Handle(Query request, CancellationToken cancellationToken)",
      "      {",
      "        return await _context.${1:Domains}.ToListAsync();",
      "      }",
      "    }",
      "  }",
      "}"
    ],
    "description": "Query Handler"
  },
  "Command Handler": {
    "prefix": "chandler",
    "body": [
      "using System;",
      "using System.Threading;",
      "using System.Threading.Tasks;",
      "using Domain;",
      "using MediatR;",
      "using Persistence;",
      "",
      "namespace Application.${1:Domains}",
      "{",
      "  public class ${2:Action}",
      "  {",
      "    public class Command : IRequest",
      "    {",
      "      public Guid Id { get; set; }",
      "      // properties",
      "    }",
      "",
      "    public class Handler : IRequestHandler<Command>",
      "    {",
      "      private readonly DataContext _context;",
      "",
      "      public Handler(DataContext context)",
      "      {",
      "        _context = context;",
      "      }",
      "",
      "      public async Task<Unit> Handle(Command request, CancellationToken cancellationToken)",
      "      {",
      "        var domain = new ${3:Domain}",
      "        {",
      "          Id = request.Id,",
      "          // mapping logic goes here",
      "        };",
      "",
      "        // handler logic goes here",
      "",
      "        _context.${1:Domains}.Add(domain);",
      "        var success = await _context.SaveChangesAsync() > 0;",
      "",
      "        if (success)",
      "          return Unit.Value;",
      "",
      "        throw new Exception(\"Problem saving changes\");",
      "      }",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "Command Handler"
  }
}
